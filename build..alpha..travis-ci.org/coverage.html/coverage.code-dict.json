{"/home/travis/build/npmtest/node-npmtest-named-routes/test.js":"/* istanbul instrument in package npmtest_named_routes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-named-routes/lib.npmtest_named_routes.js":"/* istanbul instrument in package npmtest_named_routes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_named_routes = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_named_routes = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-named-routes/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-named-routes && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_named_routes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_named_routes\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_named_routes.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_named_routes.rollup.js'] =\n            local.assetsDict['/assets.npmtest_named_routes.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_named_routes.__dirname + '/lib.npmtest_named_routes.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-named-routes/node_modules/named-routes/router.js":"var Route = require('./route');\n\nexports = module.exports = Router;\n\n/**\n * Initialize a new `Router` with the given `options`.\n *\n * @param {Object} options\n * @api private\n */\nfunction Router(options) {\n  var self = this;\n  options = options || {};\n\n  this.expressMode = false;\n\n  this.routesByMethod = {};\n  this.routesByMethodAndPath = {};\n  this.routesByNameAndMethod = {};\n  this.callbacksByPathAndMethod = {};\n\n  this.parameterCallbackWrappers = [];\n  this.callbacksPerParameter = {};\n\n  // Alias for `dispatch()` to match the express.js concept\n  this.middleware = function router(req, res, next) {\n    self.dispatch(req, res, next);\n  };\n\n  this.caseSensitive = options.caseSensitive == undefined ? false : options.caseSensitive;\n}\n\n/**\n * Find matching route\n *\n * @param req\n * @return {boolean|Object}\n */\nRouter.prototype.match = function (req) {\n  var method = req.method.toLowerCase();\n  var routes = this.routesByMethod[method];\n  if (!routes) return false;\n  var offset = req.route == undefined ? 0 : routes.indexOf(req.route) + 1;\n  // Performance: Lazy matching. Only match 1 route at a time. Most often the first route will generate the server response\n  for (var i = offset; i < routes.length; i++) {\n    var route = routes[i];\n    var outcome = route.match(req.path);\n    if (outcome === false) continue;\n    // guarantee array of parameters\n    outcome = outcome === true ? [] : outcome;\n    return {\n      route:    route,\n      callbacks:this.callbacksByPathAndMethod[route.path][method],\n      params:   outcome\n    }\n  }\n  return false;\n}\n\n/**\n * Registers new route\n * @param method\n * @param path\n * @param callbacks\n * @param options\n */\nRouter.prototype.add = function (method, path, callbacks, options) {\n  function flatten(arr, ret) {\n    var ret = ret || []\n      , len = arr.length;\n    for (var i = 0; i < len; ++i) {\n      if (Array.isArray(arr[i])) {\n        flatten(arr[i], ret);\n      } else {\n        ret.push(arr[i]);\n      }\n    }\n    return ret;\n  }\n\n  callbacks = [callbacks]\n  method = method.toLowerCase();\n  options = options || {};\n\n  this.routesByMethodAndPath[method] = this.routesByMethodAndPath[method] || {};\n  options.caseSensitive = options.caseSensitive == undefined ? this.caseSensitive : options.caseSensitive;\n  if (this.routesByMethodAndPath[method][path] == undefined) {\n    var route = new Route(path, options);\n    route.__defineGetter__('name', function() {return this.options.name});\n    if (this.expressMode) {\n      route.generate = expressGenerateRoute(require(\"path-to-regexp\").compile(path));\n    }\n    this.routesByMethod[method] = this.routesByMethod[method] || [];\n    this.routesByMethod[method].push(route);\n    this.routesByMethodAndPath[method][path] = route;\n    if (options.name != undefined) {\n      this.routesByNameAndMethod[options.name] = this.routesByNameAndMethod[options.name] || {};\n      this.routesByNameAndMethod[options.name][method] = route;\n    }\n  } else {\n    this.routesByMethodAndPath[method][path].setOptions(options);\n  }\n\n  this.callbacksByPathAndMethod[path] = this.callbacksByPathAndMethod[path] || {};\n  this.callbacksByPathAndMethod[path][method] = flatten(callbacks);\n}\n\nvar expressGenerateRoute = function(compile) {\n  return function(userParams) {\n    var foundAtLeastOneNull = false;\n    if (userParams) {\n      var keys = Object.keys(userParams);\n      for (var i = 0; i < keys.length; i++) {\n        if (userParams[keys[i]] === null) {\n          userParams[keys[i]] = \"__NULL_PLACEHOLDER__\";\n          foundAtLeastOneNull = true;\n        }\n      }\n    }\n    var routeName = compile(userParams);\n    return foundAtLeastOneNull ? routeName.replace(/\\/__NULL_PLACEHOLDER__/g, \"\") : routeName;\n  }\n}\n\n/**\n * Builds a URL based on the route name, method and parameters provided\n *\n * @param name\n * @param params\n * @param method\n * @return {String}\n */\nRouter.prototype.build = function (name, params, method) {\n  if (this.routesByNameAndMethod[name] == undefined) throw new Error('No route found with the name:' + name);\n  var possibleRoutes = this.routesByNameAndMethod[name];\n  method = method || Object.keys(possibleRoutes)[0];\n  return possibleRoutes[method].generate(params);\n}\n\n/**\n * Register template helper functions with exress.js application\n * @param app\n * @return Router\n */\nRouter.prototype.registerAppHelpers = function (app) {\n  var self = this;\n  var helperName = 'url';\n  if (app.helpers) {\n    var helpers = {};\n    helpers[helperName] = function(name, params, method) { return self.build(name, params, method)};\n    app.helpers(helpers);\n  } else {\n    app.locals[helperName] = function(name, params, method) { return self.build(name, params, method)};\n  }\n  return this;\n}\n\n/**\n * Register a param callback `callback` for the given parameter `name`.\n *\n * @param {String|Function} name\n * @param {Function} callback\n * @return {*|Router} for chaining\n * @api public\n */\n\nRouter.prototype.param = function (name, callback) {\n  // No name passed, add a modifier\n  if ('function' == typeof name) {\n    this.parameterCallbackWrappers.push(name);\n    return;\n  }\n\n  // apply param functions\n  var callbackWrappers = this.parameterCallbackWrappers;\n  var modifiedCallback;\n\n  callbackWrappers.forEach(function (wrapper) {\n    if (modifiedCallback = wrapper(name, callback)) {\n      callback = modifiedCallback;\n    }\n  });\n\n  // ensure we end up with a\n  // middleware function\n  if (typeof callback != 'function') {\n    throw new Error('invalid callback call for `' + name + '`, got ' + callback);\n  }\n\n  (this.callbacksPerParameter[name] = this.callbacksPerParameter[name] || []).push(callback);\n  return this;\n};\n\n/**\n * Chainable routing dispatch\n * (analogous to express middeware concept)\n *\n * @param req\n * @param res\n * @param next\n */\nRouter.prototype.dispatch = function (req, res, next) {\n  var self = this;\n  var callbacksPerParameter = this.callbacksPerParameter;\n\n  nextRoute();\n\n  function nextRoute(err) {\n    // match route\n    var match = self.match(req);\n    if (match == false) return next(err);\n    req.route = match.route;\n    req.params = match.params;\n\n    // workaround vars for the recursion\n    var i = 0;\n    var paramIndex = 0;\n    var paramCallbackIndex;\n    var parameterNames = Object.keys(req.params);\n    var paramValue;\n    var paramName;\n    var paramCallbacks;\n\n    //Start the execution chain. Process parameters, next invoke route middleware callbacks\n    processNextParameter();\n\n    // Callbacks for each parameter\n    // We need this to be recursive rather then a loop in order to allow the fluid `next()` concept from the actual callbacks\n    function processNextParameter(err) {\n      paramCallbackIndex = 0;\n      paramName = parameterNames[paramIndex++];\n      paramValue = paramName && req.params[paramName];\n      paramCallbacks = paramName && callbacksPerParameter[paramName];\n\n      try {\n        if ('route' == err) {\n          // Specific case where the error means `next route please`? Strange, anyways this is inherited by express.js\n          nextRoute();\n        } else if (err) {\n          // Handle errors. Assumption is made that there's a global error handler or a specific route callback that handle the errors\n          nextRouteMiddleware(err);\n        } else if (paramCallbacks) {\n          // No errors so just run through the parameter callbacks if there's any\n          nextCallbackForParam();\n        } else if (paramName) {\n          // No callbacks\n          processNextParameter();\n        } else {\n          // Parameter callbacks ended, start running route middleware callbacks\n          nextRouteMiddleware();\n        }\n      } catch (err) {\n        processNextParameter(err);\n      }\n    }\n\n    // single param callbacks\n    function nextCallbackForParam(err) {\n      var callback = paramCallbacks[paramCallbackIndex++];\n      if (err || !callback) return processNextParameter(err);\n      callback(req, res, nextCallbackForParam, paramValue, paramName);\n    }\n\n    // invoke route callbacks\n    function nextRouteMiddleware(err) {\n      var callback = match.callbacks[i++];\n      try {\n        if ('route' == err) {\n          // Specific case where the error means `next route please`? Strange.. anyways this is inherited by express.js\n          nextRoute();\n        } else if (err && callback) {\n          // Handle errors. If the current callback doesn't support error handling try next one\n          if (callback.length < 4) return nextRouteMiddleware(err);\n          callback(err, req, res, nextRouteMiddleware);\n        } else if (callback) {\n          callback(req, res, nextRouteMiddleware);\n        } else {\n          // No more callbacks\n          nextRoute(err);\n        }\n      } catch (err) {\n        nextRouteMiddleware(err);\n      }\n    }\n  }\n};\n\n/**\n * Extend express.js application\n * @param app\n * @return Router\n */\nRouter.prototype.extendExpress = function (app) {\n  var methods = require('methods');\n  this.expressMode = true;\n  app.namedRoutes = this;\n  app._routingContext = [];\n\n  methods.forEach(function (method) {\n    var originalMethod = app[method];\n    app[method] = function (key) {\n      if ('get' == method && 1 == arguments.length && typeof key == 'string') return this.set(key);\n      var args = this._routingContext.concat([].slice.call(arguments));\n      var path = args[0];\n      var name = \"\";\n      // Check if second argument is the route name\n      if (typeof args[1] == 'string') {\n        name = args[1];\n        args[1] = function(req, res, next){\n          req.route.name = name;\n          next();\n        };\n      }\n      this.namedRoutes.add(method, path, [], {name: name});\n      return originalMethod.apply(this, args);\n    }\n  });\n\n  app.all = function() {\n    var methods = require('methods');\n    var args = [].slice.call(arguments);\n\n    return methods.forEach(function(method){\n      app[method].apply(app, args);\n    });\n  };\n\n  return this;\n}\n","/home/travis/build/npmtest/node-npmtest-named-routes/node_modules/named-routes/route.js":"var XRegExp = require('xregexp');\n\nexports = module.exports = Route;\n\nfunction Route(path, options) {\n  this.options = {\n    recursiveWildcard:true,\n    caseSensitive:    false,\n    wildcardInPairs:  false\n  }\n  this.setOptions(options);\n  this.path = path;\n  this.regex = null;\n}\n\n/**\n * Set route options\n * @param options\n */\nRoute.prototype.setOptions = function (options) {\n  for (var prop in options) {\n    this.options[prop] = options[prop];\n  }\n}\n/**\n * Creates a regular expression from the provided `path` to match the URL against\n * @return XRegExp\n * @todo add parameter-specific regexes like :id => [\\d]+, clean the regex items like `\\.` so `\\` => `\\\\`\n * @todo if a Regex object passed => extract pattern\n */\nRoute.prototype.compile = function () {\n  var path = this.path;\n\n  // ensure '*' is interpreted correctly\n  if(path === '*') path = '/*';\n\n  // force all inner `masked` parameters to be required\n  path = path.replace(/\\/\\*\\*/g, '/*');\n\n  // store the cleaned path to be used for URL generation\n  this.cleanedPath = path;\n\n  // make bracketed groups in url path a optional regex group\n  path = path.replace(/\\)/g, ')?');\n\n  //the last `masked` parameter is optional\n  if (path.slice(-2) == '/*') {\n    path = path.slice(0, -2) + \"/**\";\n  }\n\n  //escape full stops\n  path = path.replace(/\\./g, '\\\\.');\n\n  // change wildcards , the `*` (calling them `masked` parameters) to masked0, masked1...\n  var maskedWildcardName = '';\n  var hasMaskedWildcard = false;\n  var masked = [];\n  var i = 0;\n\n  path = XRegExp.replace(path, XRegExp('/\\\\*\\\\*?', 'g'), function (match) {\n    var splatName = 'splat' + i;\n    i++;\n    masked.push(splatName);\n    // last `splat` is optional and allows having `/` inside of it\n    if (match == '/**') {\n      hasMaskedWildcard = true;\n      maskedWildcardName = splatName;\n      return '(/(?<' + splatName + '>.*))?';\n    }\n    // any other `masked` parameters are required and don't allow `/` inside of them\n    return '/(?<' + splatName + '>[^/]+)';\n  });\n\n  //the last `masked` parameter is optional\n  if (path.slice(-1) == '/') {\n    path = path.slice(0, -1);\n  }\n\n  this.hasMaskedWildcard = hasMaskedWildcard;\n  this.masked = masked;\n  this.maskedWildcardName = maskedWildcardName;\n\n\n  // change & count named parameters ( `:params`)\n  var params = [];\n  path = XRegExp.replace(path, XRegExp(':[\\\\p{L}0-9_]+', 'g'), function (match) {\n    match = match.replace(':', '');\n    if (params.indexOf(match) > -1) return ':' + match;\n    params.push(match);\n    return '(?<' + match + '>[^/]+)';\n  });\n  this.params = params;\n\n\n  // Check if there is optional parts in the path\n  var optionalParams = [];\n  var bracketGroups = [];\n  var self = this;\n\n  // Performance: only check if there's a bracket character in the path\n  if (self.cleanedPath.indexOf('(') > -1) {\n    var unclosed = [];\n    for (var i = 0; i <= self.cleanedPath.length - 1; i++) {\n      var currentChar = self.cleanedPath[i];\n      if (currentChar == '(') {\n        bracketGroups.push({\n          start: i,\n          end:   null,\n          params:[]\n        });\n        unclosed.push(bracketGroups.length - 1);\n        continue;\n      }\n      if (currentChar == ')') {\n        bracketGroups[unclosed.pop()].end = i;\n      }\n    }\n    // Order by opening bracket position, descending\n    bracketGroups.sort(function (a, b) {\n      return a.start > b.start ? -1 : 1;\n    })\n    // Check for parameters in the optional parts, i.e. optional parameters\n    params.forEach(function (paramName) {\n      var index = self.cleanedPath.indexOf(':' + paramName);\n      bracketGroups.every(function (group) {\n        if (group.start < index && group.end > index && optionalParams.indexOf(paramName) == -1) {\n          optionalParams.push(paramName);\n          group.params.push(paramName);\n          return false;\n        }\n        return true;\n      })\n    })\n  }\n  this.optionalParams = optionalParams;\n  this.optionalParts = bracketGroups;\n\n  // Store compiled regex\n  this.regex = XRegExp('^' + path + '$', this.options.caseSensitive ? 'i' : undefined);\n  return this.regex;\n}\n\n\n/**\n * Check if URL matches the route and if it does extract parameters\n * @param url\n * @return {*}\n */\nRoute.prototype.match = function (url) {\n  //make sure the last `/` is trimmed off the url, otherwise last splash can falsely be empty string, i.e. ''\n  if (url.slice(-1) == '/') {\n    url = url.slice(0, -1);\n  }\n  var path = this.path;\n\n  // Matches url?\n  // Performance: If there isn't any regex characters `*:()` then simply check for equality\n  if (path.indexOf('*') == -1 && path.indexOf(':') == -1 && path.indexOf('(') == -1 && path.indexOf(')') == -1 && path == url) {\n    return true;\n  }\n  var regex = this.regex ? this.regex : this.compile();\n  var matches = XRegExp.exec(url, regex);\n  if (matches == null) return false;\n\n  // Initialise the return value (found parameters)\n  var self = this;\n  var RequestParams = {_masked:[]};\n\n  // All named parameters\n  self.params.forEach(function (param) {\n    if (matches[param] == undefined) return;\n    RequestParams[param] = matches[param];\n  });\n\n  // All masked/unnamed parameters\n  var masked = self.masked;\n  masked.every(function (maskedName) {\n    if (matches[maskedName] == undefined) return true;\n    if (maskedName != self.maskedWildcardName) {\n      RequestParams._masked.push(matches[maskedName]);\n      return true;\n    }\n    // there is a anything-goes wildcard in the end of the url path, handle it:\n    if (self.options.recursiveWildcard) {\n      var maskedWildcardData = matches[maskedName].split('/');\n      // If we have `.../id/23` then:\n      // 1) parse is as 0=>id, 1=>23\n      if (!self.options.wildcardInPairs) {\n        RequestParams._masked = RequestParams._masked.concat(maskedWildcardData);\n        return false;\n      }\n      // 2) parse is as id => 23\n      var i = 0;\n      while (maskedWildcardData[i + 1] != undefined) {\n        if (i % 2 != 0) {\n          i++;\n          continue;\n        }\n        RequestParams[maskedWildcardData[i]] = maskedWildcardData[i + 1];\n        i++;\n      }\n    } else {\n      RequestParams._masked.push(matches[maskedName]);\n    }\n    return false;\n  });\n\n  return RequestParams;\n}\n\n\n/**\n * Builds a URL using provided parameters\n *\n * @param {array} userParams The parameters, example: {id:4, _masked:[2, 1, 2]}\n * @return {String}\n */\nRoute.prototype.generate = function (userParams) {\n  // Initialise return value\n  var self = this;\n  if (!this.regex) this.compile();\n  var url = this.cleanedPath;\n  var foundParameters = [];\n  var knownNamedParameters = this.params;\n  userParams = userParams == undefined ? {_masked:[]} : userParams;\n  userParams._masked = userParams._masked == undefined ? [] : userParams._masked;\n  // Check what parameters were provided by the user\n  knownNamedParameters.forEach(function (name) {\n    if (userParams[name] === undefined) return;\n    foundParameters.push(name);\n  })\n\n  // Has the user provided all parameters?\n  if (foundParameters.length != knownNamedParameters.length) {\n    // Don't match this route if there can't be any optional parameters\n    if (this.optionalParams.length == 0) throw new Error('not all url parameters are provided');\n    // Remove optional parts with missing parameters inside\n    url = this.removePartsWithMissingParams(url, userParams);\n  }\n  if (this.optionalParams.length) {\n    url = url.replace(/[\\(\\)]/g, '');\n  }\n\n  // Replace named parameters\n  foundParameters.forEach(function (name) {\n    var parameter = userParams[name];\n    if(parameter !== null){\n      // ignore everything beyond '#'\n      parameter = parameter.toString().split(\"#\")[0];\n      url = url.replace(':' + name, parameter);\n    } else {\n      url = url.replace(new RegExp(':' + name + '/|/:' + name), '');\n    };\n  })\n\n  // Replace masked/unnamed parameters, account for masked parameters that could have been removed in the optional parts\n  var maskCount = url.match(/\\*/g);\n  var requiredMaskedNum = maskCount == null ? 0 : maskCount.length;\n  requiredMaskedNum = this.hasMaskedWildcard ? requiredMaskedNum - 1 : requiredMaskedNum;\n  var usedMasked = 0;\n\n  // Handle masked parameters\n  userParams._masked.forEach(function (value, i) {\n    // fill in required masked parameters\n    if (usedMasked < requiredMaskedNum) {\n      url = url.replace('*', value);\n      usedMasked++;\n      return true;\n    }\n    if (url.indexOf('*') == -1) throw new Error('too much `_masked` values provided. if you think this is not the problem check if you forgot to pass a named parameter you wanted');\n    // if wildcard parameters are enabled and are not parsed in pairs join the remaining of userParams._masked\n    if (self.hasMaskedWildcard && !self.options.wildcardInPairs) {\n      url = url.replace('*', userParams._masked.splice(i).join('/'));\n    }\n    return false;\n  });\n  if (userParams._masked.length < requiredMaskedNum) throw new Error('not enough `_masked` values provided');\n  delete userParams._masked;\n\n  // Handle optional masked parameters\n  if (this.hasMaskedWildcard && url.indexOf('*') > -1) {\n    // Make sure we replace the last `*` with something (even if it is an empty string)\n    var lastMaskReplacement = '';\n    // Handle masked wildcard parameters parsed in pairs\n    if (this.options.wildcardInPairs) {\n      for (var name in userParams) {\n        var value = userParams[name];\n        if (foundParameters.indexOf(name) > -1) continue;\n        lastMaskReplacement += name + '/' + value + '/';\n      }\n    }\n    url = url.replace('*', lastMaskReplacement);\n  }\n\n  if (url === \"\") return \"/\";\n  if (url.length > 1 && url[url.length - 1] === \"/\") return url.slice(0,-1);\n  return url;\n}\n\n\nRoute.prototype.removePartsWithMissingParams = function (url, userParams) {\n  var groupsToRemove = [];\n  this.optionalParts.forEach(function (part) {\n    part.params.every(function (optionalParam) {\n      if (userParams[optionalParam] == undefined) {\n        groupsToRemove.push(part);\n        return false;\n      }\n      return true;\n    });\n  });\n  var subtractPairs = [];\n  groupsToRemove.forEach(function (group) {\n    var from = group.start, to = group.end, accountedForRemoval = false;\n    subtractPairs.forEach(function (subtract, i) {\n      if (from < subtract.start && to > subtract.end) {\n        to = to - (subtract.end + 1 - subtract.start);\n        subtractPairs[i] = {start:from, end:to};\n        accountedForRemoval = true;\n      }\n    });\n    url = url.substr(0, from) + url.substr(to + 1);\n    if (!accountedForRemoval) subtractPairs.push({start:group.start, end:group.end});\n  });\n  return url;\n}\n\n"}